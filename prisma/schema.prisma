generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  userId    String
  id        String    @id @default(uuid())
  title     String
  complete  Boolean
  createdAt DateTime?
  updatedAt DateTime? @updatedAt
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int
  Task         Task    @relation(fields: [taskId], references: [id])
  User         User    @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int
  Task   Task   @relation(fields: [taskId], references: [id])
  User   User   @relation(fields: [userId], references: [userId])
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  ProjectTeam ProjectTeam[]
  Task        Task[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  Project   Project @relation(fields: [projectId], references: [id])
  Team      Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id                             Int              @id @default(autoincrement())
  title                          String
  description                    String?
  status                         String?
  priority                       String?
  tags                           String?
  startDate                      DateTime?
  dueDate                        DateTime?
  points                         Int?
  projectId                      Int
  authorUserId                   Int
  assignedUserId                 Int?
  Attachment                     Attachment[]
  Comment                        Comment[]
  User_Task_assignedUserIdToUser User?            @relation("Task_assignedUserIdToUser", fields: [assignedUserId], references: [userId])
  User_Task_authorUserIdToUser   User             @relation("Task_authorUserIdToUser", fields: [authorUserId], references: [userId])
  Project                        Project          @relation(fields: [projectId], references: [id])
  TaskAssignment                 TaskAssignment[]
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int
  taskId Int
  Task   Task @relation(fields: [taskId], references: [id])
  User   User @relation(fields: [userId], references: [userId])
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  ProjectTeam          ProjectTeam[]
  User                 User[]
}

model User {
  userId                         Int              @id @default(autoincrement())
  cognitoId                      String           @unique
  username                       String           @unique
  profilePictureUrl              String?
  teamId                         Int?
  Attachment                     Attachment[]
  Comment                        Comment[]
  Task_Task_assignedUserIdToUser Task[]           @relation("Task_assignedUserIdToUser")
  Task_Task_authorUserIdToUser   Task[]           @relation("Task_authorUserIdToUser")
  TaskAssignment                 TaskAssignment[]
  Team                           Team?            @relation(fields: [teamId], references: [id])
}
